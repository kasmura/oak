{"google":"","body":"# Oak\r\n\r\nOak is Node.js project delivering an anonymous and secure network between nodes. It uses encrypted JSON-onions to make\r\nall communication untracable and obscured.\r\n\r\n**This is the planned result of oak:**\r\n### Client\r\n```js\r\nvar client = require('oak').client();\r\nclient.network = 'oak://127.0.0.1:4321';\r\n\r\nclient.on('connection', function(socket) {\r\n  socket.on('news', function (data) {\r\n    console.log(data);\r\n    socket.send('myEvent', { my: 'data'});\r\n  });    \r\n});\r\n\r\nclient.connect('127.0.0.1:1234');\r\n```\r\n\r\n### Server\r\n```js\r\nvar server = require('oak').server();\r\nserver.network = 'oak://127.0.0.1:4321';\r\n\r\nserver.on('connection', function (socket) {\r\n  socket.send('news', { hello: 'world'});\r\n  socket.on('myEvent', function (data) {\r\n    console.log(data);\r\n  });\r\n});\r\n\r\nserver.listen('127.0.0.1:1234')\r\n```\r\n\r\n## Model\r\n\r\n### Router\r\nA oak-network consists of various routers that together enable a user of the network to anonymize and secure\r\nhis communication. It receives information and redirects it to the next router in the circuit.\r\n\r\n### Directory-server\r\nThe routers are connected to a central-server were they report that they are a part of the network.\r\nThis server is called a directory-server and has a list of the routers in the network. The client can connect to the\r\ndirectory-server, and download the list to build a circuit from. Directory-servers are a tempory component of Oak\r\nand should be replaced by a distributed list of routers, so that the network will be more balanced and secure.\r\n\r\n### Circuit\r\nThe client chooses random routers from the list, and builds a circuit through which the data can travel.\r\nIt exchanges keys with the routers in the circuit, and when the client has keys for all the routers, it can built\r\nan onion-object when it wants to send data.\r\n\r\n### Onion-objects\r\nAn onion-object is data encrypted multiple times, so that each router decrypt the onion, thus metaphorically peeling\r\na layer of the onion, with his own key, and sends the rest down the circuit, until it reaches it's destination.\r\n\r\n## Implementation\r\n\r\nThe model described above, is what is trying to be implemented using node.js. Communication between clients and routers,\r\nand routers and dir-server are TCP. For TCP the tcp.js library is used. Router-lists are served by the dir-server through\r\nHTTP.\r\n\r\n## Status\r\n\r\n### Done \r\nClient downloads router-list and builds circuit\r\n\r\nExchanging keys with all routers in circuit\r\n\r\n### Currently\r\nExperimental communication with last-node","name":"Oak","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Anonymous and encrypted communication for node.js"}